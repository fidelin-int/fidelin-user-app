name: Bump version from PR title and generate changelog

on:
  pull_request:
    types: [closed]

permissions:
  contents: write

jobs:
  bump-version:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          persist-credentials: true

      - name: Set PR context env
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_USER: ${{ github.event.pull_request.user.login }}
        run: |
          echo "PR_TITLE set"
          echo "PR_NUMBER set"

      - name: Determine bump type from PR title
        id: determine
        run: |
          title='${{ github.event.pull_request.title }}'
          echo "PR title: $title"
          type="none"
          if echo "$title" | grep -iq '\[major\]'; then type="major"; fi
          if echo "$title" | grep -iq '\[minor\]'; then type="minor"; fi
          if echo "$title" | grep -iq '\[patch\]'; then type="patch"; fi
          if echo "$title" | grep -iq '\[build\]'; then type="build"; fi
          echo "bump_type=$type" >> "$GITHUB_OUTPUT"

      - name: Bump pubspec + Android + iOS + changelog + tag
        if: ${{ steps.determine.outputs.bump_type != 'none' }}
        env:
          BUMP_TYPE: ${{ steps.determine.outputs.bump_type }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_USER: ${{ github.event.pull_request.user.login }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Bump type: $BUMP_TYPE"

          # Create a temporary python script and run it. Using a heredoc with 'PY' prevents variable expansion.
          cat > bump_script.py <<'PY'
import os, re, sys, pathlib, subprocess, datetime

repo_root = pathlib.Path('.').resolve()

bump = os.environ.get('BUMP_TYPE', '').lower()
pr_title = os.environ.get('PR_TITLE', '') or ''
pr_body = os.environ.get('PR_BODY', '') or ''
pr_number = os.environ.get('PR_NUMBER', '') or ''
pr_user = os.environ.get('PR_USER', '') or ''

if bump not in ('major','minor','patch','build'):
    print("Nothing to bump (BUMP_TYPE not set). Exiting.")
    sys.exit(0)

pubspec_path = repo_root / 'pubspec.yaml'
if not pubspec_path.exists():
    print("Error: pubspec.yaml not found at expected path:", pubspec_path)
    sys.exit(1)

txt = pubspec_path.read_text(encoding='utf-8')
m = re.search(r'^\s*version:\s*([0-9]+)\.([0-9]+)\.([0-9]+)(?:\+([0-9]+))?\s*$', txt, flags=re.MULTILINE)
if not m:
    print("Could not find a version: X.Y.Z+N line in pubspec.yaml")
    sys.exit(1)

major, minor, patch, build = m.groups()
major = int(major)
minor = int(minor)
patch = int(patch)
build = int(build) if build else 0

old_version = f"{major}.{minor}.{patch}"
old_build = build
print("Old version:", old_version, "Old build:", old_build)

if bump == 'major':
    major += 1
    minor = 0
    patch = 0
elif bump == 'minor':
    minor += 1
    patch = 0
elif bump == 'patch':
    patch += 1
elif bump == 'build':
    pass

new_build = old_build + 1
new_version = f"{major}.{minor}.{patch}"
new_version_line = f"version: {new_version}+{new_build}"

txt2 = re.sub(r'^\s*version:.*$', new_version_line, txt, flags=re.MULTILINE)
pubspec_path.write_text(txt2, encoding='utf-8')
print("Wrote new pubspec version:", new_version_line)

android_gradle = repo_root / 'android' / 'app' / 'build.gradle'
if android_gradle.exists():
    gtxt = android_gradle.read_text(encoding='utf-8')
    gtxt2 = re.sub(r'(versionCode\s+)\d+', r'\g<1>' + str(new_build), gtxt)
    gtxt2 = re.sub(r'(versionName\s+)"[^"]+"', r'\g<1>"' + new_version + '"', gtxt2)
    if gtxt != gtxt2:
        android_gradle.write_text(gtxt2, encoding='utf-8')
        print("Updated android/app/build.gradle -> versionCode and versionName")
    else:
        print("No changes in android/app/build.gradle (patterns not found).")
else:
    print("android/app/build.gradle not found; skipping Android update.")

ios_info = repo_root / 'ios' / 'Runner' / 'Info.plist'
if ios_info.exists():
    itxt = ios_info.read_text(encoding='utf-8')
    itxt2 = re.sub(
        r'(<key>CFBundleShortVersionString</key>\s*<string>)([^<]+)(</string>)',
        r'\1' + new_version + r'\3',
        itxt,
        flags=re.MULTILINE
    )
    itxt2 = re.sub(
        r'(<key>CFBundleVersion</key>\s*<string>)([^<]+)(</string>)',
        r'\1' + str(new_build) + r'\3',
        itxt2,
        flags=re.MULTILINE
    )
    if itxt != itxt2:
        ios_info.write_text(itxt2, encoding='utf-8')
        print("Updated ios/Runner/Info.plist -> CFBundleShortVersionString and CFBundleVersion")
    else:
        print("No changes in ios/Runner/Info.plist (patterns not found).")
else:
    print("ios/Runner/Info.plist not found; skipping iOS update.")

changelog_path = repo_root / 'CHANGELOG.md'
today = datetime.datetime.utcnow().date().isoformat()
tag_name = f"v{new_version}+{new_build}"

header = f"## {tag_name} - {today}\n\n"
meta = f"- PR #{pr_number} by @{pr_user}\n- Title: {pr_title}\n\n"
body = (pr_body.strip() + "\n\n") if pr_body.strip() else ""
entry = header + meta + body + "---\n\n"

if changelog_path.exists():
    existing = changelog_path.read_text(encoding='utf-8')
    changelog_path.write_text(entry + existing, encoding='utf-8')
    print("Prepended changelog with PR description.")
else:
    changelog_path.write_text("# Changelog\n\n" + entry, encoding='utf-8')
    print("Created CHANGELOG.md with first entry.")

subprocess.run(['git', 'config', 'user.name', 'github-actions'], check=True)
subprocess.run(['git', 'config', 'user.email', 'actions@github.com'], check=True)

subprocess.run(['git', 'add', '-A'], check=True)
commit_msg = f'chore: bump version to {new_version}+{new_build} (BUMP={bump}) - PR #{pr_number} [ci skip]'
res = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
if not res.stdout.strip():
    print("No changes to commit.")
    sys.exit(0)

subprocess.run(['git', 'commit', '-m', commit_msg], check=True)
tag_msg = f"{tag_name} - Release generated by workflow (PR #{pr_number})"
subprocess.run(['git', 'tag', '-a', tag_name, '-m', tag_msg], check=True)
subprocess.run(['git', 'push', 'origin', 'HEAD:main'], check=True)
subprocess.run(['git', 'push', 'origin', tag_name], check=True)
print("Committed, pushed and tagged:", tag_name)
PY

          python3 bump_script.py

      - name: Output result
        run: |
          echo "Version bump job finished."
